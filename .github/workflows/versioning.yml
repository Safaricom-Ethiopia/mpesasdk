name: Version Tagging and CI/CD for Go

on:
  push:
    branches:
      - main  # Only run for pushes to the main branch
    paths:
      - '**/*.go'  # Only track changes to Go files

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'  # Adjust to the Go version your project uses

      # Get the current Git tag (if any)
      - name: Get current Git tag
        id: get_tag
        run: |
          # Get the most recent Git tag (if it exists)
          VERSION=$(git describe --tags --abbrev=0)
          if [ -z "$VERSION" ]; then
            VERSION="v0.0.0"  # Default to v0.0.0 if no tags exist
          fi
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Determine the new version based on commit messages
      - name: Determine version bump
        id: determine_version
        run: |
          # Extract version components from the current version
          VERSION=${{ env.VERSION }}
          if [[ "$VERSION" =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            echo "Invalid version format. Please ensure versioning follows 'vX.Y.Z'"
            exit 1
          fi

          # Get the latest commit messages
          COMMITS=$(git log --oneline --no-merges --pretty=format:"%s" HEAD^..HEAD)

          # Initialize version increment
          VERSION_CHANGE="none"

          # Check the commit messages for versioning keywords
          for COMMIT in "$COMMITS"; do
            if [[ "$COMMIT" == feat:* ]]; then
              VERSION_CHANGE="minor"
            elif [[ "$COMMIT" == fix:* ]]; then
              VERSION_CHANGE="patch"
            elif [[ "$COMMIT" == add:* ]]; then
              VERSION_CHANGE="major"
            fi
          done

          # Increment version based on commit message
          if [ "$VERSION_CHANGE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0  # Reset patch version for minor update
          elif [ "$VERSION_CHANGE" == "patch" ]; then
            PATCH=$((PATCH + 1))
          elif [ "$VERSION_CHANGE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0  # Reset minor version for major update
            PATCH=0  # Reset patch version for major update
          fi

          # Create the new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Tag the repository with the new version
      - name: Create Git tag
        run: |
          # Create a new Git tag for the updated version
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

      # Optionally, commit the updated version to a VERSION file (if you are tracking versions manually)
      - name: Commit version file (optional)
        run: |
          # Optional: If you track versions in a VERSION file, update and commit it
          echo "$NEW_VERSION" > VERSION
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git add VERSION
          git commit -m "Bump version to $NEW_VERSION"
          git push

  deploy:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      # Checkout code for deployment
      - name: Checkout code
        uses: actions/checkout@v2

      # Example deployment step
      - name: Deploy Application (Example)
        run: |
          echo "Deploying application with version ${{ env.NEW_VERSION }}..."
          # Your deployment commands here (e.g., deploy to a server, cloud service, etc.)

